// Data export functionality for backup and portability

interface ExportDocument {
  id: number;
  title: string;
  location: string;
  description?: string;
  category: string;
  urgencyTags: string[];
  expirationDate?: string;
  createdAt: string;
  updatedAt: string;
}

interface ExportData {
  documents: ExportDocument[];
  exportDate: string;
  version: string;
  totalDocuments: number;
}

export async function exportDocuments(): Promise<void> {
  try {
    // Import documentDB for local storage access
    const { documentDB } = await import("./db");
    
    // Fetch all documents from local storage
    const documents = await documentDB.getAllDocuments();
    
    // Prepare export data
    const exportData: ExportData = {
      documents: documents.map((doc: any) => ({
        id: doc.id,
        title: doc.title,
        location: doc.location,
        description: doc.description || "",
        category: doc.category,
        urgencyTags: doc.urgencyTags || [],
        expirationDate: doc.expirationDate ? doc.expirationDate.toISOString() : undefined,
        createdAt: doc.createdAt.toISOString(),
        updatedAt: doc.updatedAt.toISOString(),
      })),
      exportDate: new Date().toISOString(),
      version: "1.0.0",
      totalDocuments: documents.length,
    };

    // Create and download the file
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: "application/json" });
    
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `paperless-plus-backup-${new Date().toISOString().split("T")[0]}.json`;
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error("Export failed:", error);
    throw error;
  }
}

export async function importDocuments(file: File): Promise<number> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    
    reader.onload = async (event) => {
      try {
        const content = event.target?.result as string;
        const importData: ExportData = JSON.parse(content);
        
        // Validate import data structure
        if (!importData.documents || !Array.isArray(importData.documents)) {
          throw new Error("Invalid backup file format");
        }
        
        let importedCount = 0;
        
        // Import documentDB for local storage access
        const { documentDB } = await import("./db");
        
        // Import each document
        for (const doc of importData.documents) {
          try {
            const documentData = {
              title: doc.title,
              location: doc.location,
              description: doc.description,
              category: doc.category,
              urgencyTags: doc.urgencyTags || [],
              expirationDate: doc.expirationDate ? new Date(doc.expirationDate) : undefined,
            };
            
            await documentDB.addDocument(documentData);
            importedCount++;
          } catch (error) {
            console.error(`Failed to import document: ${doc.title}`, error);
          }
        }
        
        resolve(importedCount);
      } catch (error) {
        reject(new Error("Failed to parse backup file"));
      }
    };
    
    reader.onerror = () => reject(new Error("Failed to read file"));
    reader.readAsText(file);
  });
}

// Generate shareable document list (text format)
export function generateShareableList(documents: any[]): string {
  const header = `üìÑ Paperless+ Document List\nGenerated on ${new Date().toLocaleDateString()}\n\n`;
  
  const documentList = documents
    .map((doc, index) => {
      let text = `${index + 1}. ${doc.title}\n`;
      text += `   üìç Location: ${doc.location}\n`;
      text += `   üè∑Ô∏è  Category: ${doc.category}\n`;
      
      if (doc.urgencyTags && doc.urgencyTags.length > 0) {
        text += `   ‚ö†Ô∏è  Tags: ${doc.urgencyTags.join(", ")}\n`;
      }
      
      if (doc.expirationDate) {
        text += `   üìÖ Expires: ${new Date(doc.expirationDate).toLocaleDateString()}\n`;
      }
      
      if (doc.description) {
        text += `   üìù Notes: ${doc.description}\n`;
      }
      
      return text;
    })
    .join("\n");
  
  const footer = `\nüìä Total Documents: ${documents.length}\n\nGenerated by Paperless+ - Privacy-focused document tracking`;
  
  return header + documentList + footer;
}

// Share document list via Web Share API (if available)
export async function shareDocumentList(documents: any[]): Promise<boolean> {
  if (!navigator.share) {
    return false;
  }
  
  const shareText = generateShareableList(documents);
  
  try {
    await navigator.share({
      title: "My Document List - Paperless+",
      text: shareText,
    });
    return true;
  } catch (error) {
    console.error("Sharing failed:", error);
    return false;
  }
}
